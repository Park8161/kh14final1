<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="roomMessage">
	
	<select id="sequence" resultType="int">
		select room_message_seq.nextval from dual
	</select>

	<insert id="add">
		insert into room_message(
			room_message_no, room_message_type, room_message_sender,
			room_message_receiver, room_message_content, room_message_time,
			room_no
		)
		values(
			#{roomMessageNo}, #{roomMessageType}, #{roomMessageSender},
			<!-- null이 들어갈 수 있도록 형태를 명시 -->
			#{roomMessageReceiver, jdbcType=VARCHAR}, 
			#{roomMessageContent}, #{roomMessageTime}, #{roomNo}
		)
	</insert>
	
	<select id="list" resultType="websocketMessageVO">
		select 
			RM.room_message_no "no", 
			RM.room_message_type "type", 
			RM.room_message_sender "sender_member_id", 
			M.member_level "sender_member_level", 
			RM.room_message_receiver "receiver_member_id", 
			RM.room_message_content "content", 
			RM.room_message_time "time", 
			RM.room_message_read "isRead"   
		from room_message RM 
			left outer join member M 
				on RM.room_message_sender = M.member_id 
		where 
			room_no = #{roomNo} 
			and 
			(
				RM.room_message_type = 'chat' 
				or 
				RM.room_message_type = 'system' 
			) 
		order by "no" ASC
	</select>
	
	<!-- react에 보내기 쉽게 조회 -->
	<select id="listMemberComplete" resultType="websocketMessageVO">
		<include refid="top-n-header"></include>
		select 
			RM.room_message_no "no",
			RM.room_message_type "type",
			RM.room_message_sender "sender_member_id",
			M.member_level "sender_member_level",
			RM.room_message_receiver "receiver_member_id",
			RM.room_message_content "content",
			RM.room_message_time "time",
			RM.room_message_read "isRead"  
		from room_message RM 
			left outer join member M 
				on RM.room_message_sender = M.member_id
		<!-- 일반채팅(chat) + 시스템메세지(system) + 나의MD만 조회 -->
		where 
			<!-- 방번호 조건 추가 -->
			room_no = #{roomNo}
			and
			<!-- 조회할 채팅에 대한 조건 -->
			(
				RM.room_message_type = 'chat' 
				or 
				RM.room_message_type = 'system' 
				<!-- DM은 회원만(memberId != null) 조회 -->
			)
			<!-- 더보기를 위한 조건 추가 - firstMessageNo가 있으면 -->
			<if test="firstMessageNo != null">
			<![CDATA[
			and RM.room_message_no < #{firstMessageNo}
			]]>
			</if>
		order by RM.room_message_no desc	
		<include refid="top-n-footer"></include>
		<!-- Top N Query 로 만들어진 최종 결과를 다시 정렬(테이블 별칭 사용 불가) -->
		order by "no" asc
	</select>
	
	<update id="setIsRead">
	UPDATE ROOM_MESSAGE SET room_message_read = 'T' 
 	WHERE room_no = #{roomNo} AND ROOM_MESSAGE_SENDER != #{memberId} 
 	<![CDATA[
		AND ROOM_MESSAGE_TIME < sysdate	
	]]>
	</update>

	<!-- 자주 사용하는(ex : Top N Query (페이징)) 구문들을 보관해두고서 불러서 사용 - 구문의 조각은 <sql> 
		태그로 작성 - 이 구문을 불러올 때는 <include>로 작성 - beginRow와 endRow가 있을 때만 구동되도록 설정 : 
		유연하게 처리 -->
	<sql id="top-n-header">
		<if test="beginRow != null and endRow != null">
			select * from (
			select rownum rn, TMP.* from (
		</if>
	</sql>
	<sql id="top-n-footer">
		<if test="beginRow != null and endRow != null">
			) TMP
			) where rn between #{beginRow} and #{endRow}
		</if>
	</sql>

	 <!-- 발신자 가져오는 메소드 -->
        <select id="findSender" resultType="String">
            select room_message_sender from room_message where room_message_no= #{messageNo}
        </select>
        <!-- 시간 가져오는 메소드 -->
        <select id="findTime" resultType="java.sql.Timestamp">
            select room_message_time from room_message where room_message_no = #{messageNo}
        </select>
        <!-- 메세지 번호 찾는 메소드-->
        <select id="findRoomMessageNo" resultType="Integer">
            select room_message_no from room_message where room_no = #{roomNo} and room_message_type= 'file'
        </select>

</mapper>
	