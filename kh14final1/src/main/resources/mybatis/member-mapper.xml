<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<!-- 데이터 조회(Read) 1. 전체조회 2. 상세조회 3. 검색 - column & keyword 검색 (정적바인딩, 동적바인딩) 
		- 복합검색 (모든 항목이 있을 수도, 없을 수도 있는 검색) -->

	<select id="list" resultType="MemberDto">
		select * from member
	</select>

	<select id="search" resultType="MemberDto">
		select * from member where
		instr(${column}, #{keyword}) > 0
	</select>

	<!-- 조건을 이용하여 list와 search를 합쳐보자! -->
	<select id="listSearch" resultType="MemberDto">
		select * from member
		<if test="column != null and keyword != null">
			where instr(${column}, #{keyword}) > 0
		</if>
	</select>

	<!-- 복합 검색(complex search) - 다양한 항목들이 있거나 없을 수 있다는 전제조건 하에 구현하는 검색 - 꼭 컬럼명이 
		아니더라도 여러 가지 형태로 개조하여 사용할 수 있다 -->
	<select id="complexSearch" resultType="MemberDto">
		<!-- top-n-header -->
		<include refid="top-n-header"></include>

		select * from member
		<!-- 조건절을 태그로 만들어서 조건이 존재할 때만 where가 등장하도록 처리 모든 조건은 and 또는 or로 시작해야한다 -->
		<where>
			<!-- 아이디 시작검사 수행 -->
			<if test="memberId != null">
				<!-- where instr(member_id, #{memberId}) > 0 -->
				and member_id like #{memberId} || '%'
			</if>
			<!-- 닉네임 시작검사 수행 -->
			<if test="memberNickname != null">
				and member_nickname like #{memberNickname} || '%'
			</if>
			<!-- 생년월일 일치검사 수행 -->
			<if test="memberBirth != null">
				and member_birth = #{memberBirth}
			</if>
			<!-- 전화번호 유사검색 수행 -->
			<if test="memberContact != null">
				<!-- and member_contact like '%' || #{memberContact} || '%' -->
				and instr(member_contact, #{memberContact}) > 0
			</if>
			<!-- 이메일 유사검색 수행 -->
			<if test="memberEmail != null">
				and instr(member_email, #{memberEmail}) > 0
			</if>
			<!-- 포인트는 최소(minMemberPoint), 최대(maxMemberPoint)로 구분 - 둘 다 있으면 최소~최대 구간을 
				조회 : 가장 복잡한 조건을 먼저 선정 - 최소만 있으면 해당 값 이상을 조회 - 최대만 있으면 해당 값 이하를 조회 -->
			<choose>
				<when test="minMemberPoint != null and maxMemberPoint != null">
					<!-- 부등호는 CDATA를 써야해서 안쓰는게 좋다 -->
					<!-- and (member_point >= #{} and member_point <= #{}) -->
					and member_point between #{minMemberPoint} and #{maxMemberPoint}
				</when>
				<when test="minMemberPoint != null">
				<![CDATA[
					and member_point >= #{minMemberPoint}
				]]>
				</when>
				<when test="maxMemberPoint != null">
				<![CDATA[
					and member_point <= #{maxMemberPoint}
				]]>
				</when>
			</choose>
			<!-- 가입일 구간검색 - 날짜는 문자열로 전송이 되지만 DB에서는 날짜 형태로 존재 (형태 불일치) - to_date 또는 
				to_char 함수를 써서 형태를 보정해야함 - 시간은 언급되지 않았기 때문에 적절하게 추가해주어야 함 - to_date(?, 'YYYY-MM-DD 
				HH24:MI:SS') : sql은 대소문자 구분 안함 - || ' ' || '23:59:59' 은 시간 설정을 안할 때 넣기위해 
				쓴다 : 입력값 + 공백 + 시간 -->
			<choose>
				<!-- 가장 복잡한 조건을 먼저 선정 -->
				<when test="beginMemberJoin != null and endMemberJoin != null">
					and member_join
					between
					to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					and
					to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="beginMemberJoin != null">
				<![CDATA[
					and member_join >= to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberJoin != null">
				<![CDATA[
					and member_join <= to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			<!-- 최근 접속일 (최근 로그인) : 가입일과 동일하게 진행 -->
			<choose>
				<!-- 가장 복잡한 조건을 먼저 선정 -->
				<when
					test="beginMemberLogin != null and endMemberLogin != null">
					and member_login
					between
					to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					and
					to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="beginMemberLogin != null">
				<![CDATA[
					and member_login >= to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberLogin != null">
				<![CDATA[
					and member_login <= to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			<!-- 회원등급 검색 - 체크박스를 통해 여러개의 값이 리스트 형태로 전달된다고 가정 - 리스트가 null이거나 비어있다면 
				작업을 수행하지 않음 - collection에 반복 대상, item에 저장할 변수명, separator에 구분자, - open에 시작 
				시 추가될 글자, close에 종료 시 추가될 글자를 적는다 -->
			<if test="memberLevelList !=null and memberLevelList.size() > 0">
				and member_level in
				<foreach item="memberLevel" collection="memberLevelList"
					open="(" separator="," close=")">
					#{memberLevel}
				</foreach>
			</if>
			<!-- 주소 검색 - 우편번호, 기본주소, 상세주소를 or로 연결하여 유사검색 진행 -->
			<if test="memberAddress != null">
				and (
				instr(member_post, #{memberAddress}) > 0
				or
				instr(member_address1, #{memberAddress}) > 0
				or
				instr(member_address2, #{memberAddress}) > 0
				)
			</if>
		</where>

		<!-- 정렬 추가 - orderList라는 이름으로 정렬 구문이 전달 - 구문이기 때문에 정적 할당($)을 써야 함 : 있는 
			그대로 넣는 것이 정적 할당 - 정렬이 하나도 제시되지 않으면? PK로 정렬 -->
		<choose>
			<when test="orderList != null and orderList.size() > 0">
				<foreach item="orderItem" collection="orderList"
					open="order by" separator="," close=", member_id asc">
					${orderItem}
				</foreach>
			</when>
			<otherwise>
				order by member_id asc
			</otherwise>
		</choose>

		<!-- top-n-footer -->
		<include refid="top-n-footer"></include>

	</select>

	<!-- 자주 사용하는(ex : Top N Query (페이징)) 구문들을 보관해두고서 불러서 사용 - 구문의 조각은 <sql> 
		태그로 작성 - 이 구문을 불러올 때는 <include>로 작성 - beginRow와 endRow가 있을 때만 구동되도록 설정 : 
		유연하게 처리 -->
	<sql id="top-n-header">
		<if test="beginRow != null and endRow != null">
			select * from (
			select rownum rn, TMP.* from (
		</if>
	</sql>
	<sql id="top-n-footer">
		<if test="beginRow != null and endRow != null">
			) TMP
			) where rn between #{beginRow} and #{endRow}
		</if>
	</sql>

	<!-- 페이징을 위한 카운트 계산 구문 -->
	<select id="complexSearchCount" resultType="int">
		select count(*) from member
		<!-- 조건절을 태그로 만들어서 조건이 존재할 때만 where가 등장하도록 처리 모든 조건은 and 또는 or로 시작해야한다 -->
		<where>
			<!-- 아이디 시작검사 수행 -->
			<if test="memberId != null">
				<!-- where instr(member_id, #{memberId}) > 0 -->
				and member_id like #{memberId} || '%'
			</if>
			<!-- 닉네임 시작검사 수행 -->
			<if test="memberNickname != null">
				and member_nickname like #{memberNickname} || '%'
			</if>
			<!-- 생년월일 일치검사 수행 -->
			<if test="memberBirth != null">
				and member_birth = #{memberBirth}
			</if>
			<!-- 전화번호 유사검색 수행 -->
			<if test="memberContact != null">
				<!-- and member_contact like '%' || #{memberContact} || '%' -->
				and instr(member_contact, #{memberContact}) > 0
			</if>
			<!-- 이메일 유사검색 수행 -->
			<if test="memberEmail != null">
				and instr(member_email, #{memberEmail}) > 0
			</if>
			<!-- 포인트는 최소(minMemberPoint), 최대(maxMemberPoint)로 구분 - 둘 다 있으면 최소~최대 구간을 
				조회 : 가장 복잡한 조건을 먼저 선정 - 최소만 있으면 해당 값 이상을 조회 - 최대만 있으면 해당 값 이하를 조회 -->
			<choose>
				<when test="minMemberPoint != null and maxMemberPoint != null">
					<!-- 부등호는 CDATA를 써야해서 안쓰는게 좋다 -->
					<!-- and (member_point >= #{} and member_point <= #{}) -->
					and member_point between #{minMemberPoint} and #{maxMemberPoint}
				</when>
				<when test="minMemberPoint != null">
				<![CDATA[
					and member_point >= #{minMemberPoint}
				]]>
				</when>
				<when test="maxMemberPoint != null">
				<![CDATA[
					and member_point <= #{maxMemberPoint}
				]]>
				</when>
			</choose>
			<!-- 가입일 구간검색 - 날짜는 문자열로 전송이 되지만 DB에서는 날짜 형태로 존재 (형태 불일치) - to_date 또는 
				to_char 함수를 써서 형태를 보정해야함 - 시간은 언급되지 않았기 때문에 적절하게 추가해주어야 함 - to_date(?, 'YYYY-MM-DD 
				HH24:MI:SS') : sql은 대소문자 구분 안함 - || ' ' || '23:59:59' 은 시간 설정을 안할 때 넣기위해 
				쓴다 : 입력값 + 공백 + 시간 -->
			<choose>
				<!-- 가장 복잡한 조건을 먼저 선정 -->
				<when test="beginMemberJoin != null and endMemberJoin != null">
					and member_join
					between
					to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					and
					to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="beginMemberJoin != null">
				<![CDATA[
					and member_join >= to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberJoin != null">
				<![CDATA[
					and member_join <= to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			<!-- 최근 접속일 (최근 로그인) : 가입일과 동일하게 진행 -->
			<choose>
				<!-- 가장 복잡한 조건을 먼저 선정 -->
				<when
					test="beginMemberLogin != null and endMemberLogin != null">
					and member_login
					between
					to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					and
					to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="beginMemberLogin != null">
				<![CDATA[
					and member_login >= to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberLogin != null">
				<![CDATA[
					and member_login <= to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			<!-- 회원등급 검색 - 체크박스를 통해 여러개의 값이 리스트 형태로 전달된다고 가정 - 리스트가 null이거나 비어있다면 
				작업을 수행하지 않음 - collection에 반복 대상, item에 저장할 변수명, separator에 구분자, - open에 시작 
				시 추가될 글자, close에 종료 시 추가될 글자를 적는다 -->
			<if test="memberLevelList !=null and memberLevelList.size() > 0">
				and member_level in
				<foreach item="memberLevel" collection="memberLevelList"
					open="(" separator="," close=")">
					#{memberLevel}
				</foreach>
			</if>
			<!-- 주소 검색 - 우편번호, 기본주소, 상세주소를 or로 연결하여 유사검색 진행 -->
			<if test="memberAddress != null">
				and (
				instr(member_post, #{memberAddress}) > 0
				or
				instr(member_address1, #{memberAddress}) > 0
				or
				instr(member_address2, #{memberAddress}) > 0
				)
			</if>
		</where>
	</select>
	
	<!-- 상세 -->
	<select id="find" resultType="MemberDto">
		select * from member where member_id = #{memberId}
	</select>	
	
	<!-- 등록 -->
	<insert id="add">
		insert into member(
			member_id, member_pw, member_name, member_email,
			member_post, member_address1, member_address2,
			member_contact, member_birth
		)
		values (
			#{memberId}, #{memberPw}, #{memberName}, #{memberEmail}, 
			#{memberPost}, #{memberAddress1}, #{memberAddress2}, 
			#{memberContact}, #{memberBirth}
		)
	</insert>
	
	<!-- 삭제 -->
	<delete id="remove">
		delete member where member_id = #{memberId}
	</delete>
	
	<!-- 수정 -->
	<update id="edit">
		update member
		set member_name = #{memberName}, member_email = #{memberEmail}, 
			member_post = #{memberPost}, member_address1 = #{memberAddress1}, 
			member_address2 = #{memberAddress2}, 
			member_contact = #{memberContact}, member_birth = #{memberBirth} 
		where member_id = #{memberId}  
	</update>
	
	<!-- 수정 by 관리자 -->
	<update id="editByAdmin">
		update member
		set member_name = #{memberName}, member_level = #{memberLevel},
			member_email = #{memberEmail}, member_post = #{memberPost},
			member_address1 = #{memberAddress1}, member_address2 = #{memberAddress2}, 
			member_contact = #{memberContact}, member_birth = #{memberBirth},
			member_point = #{memberPoint}
		where member_id = #{memberId}  
	</update>
	
	<!-- 최종 로그인 시각 갱신 -->
	<update id="login">
		update member set member_login = sysdate where member_id = #{memberId}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="changePw">
		update member set member_pw = #{memberPw} where member_id = #{memberId}
	</update>
	
	<select id="selectMemberDetail" resultType="MemberDetailVO">
	   <!-- 타회원 상세정보 추출 : 신뢰지수, 후기 개수 -->
			   
		SELECT 
		    t.REVIEW_TARGET, 
		    NVL(r.review_count, 0) AS review_count, 
		    NVL(r.avg_score, 0) AS avg_score
		FROM 
		    (SELECT #{memberId} AS REVIEW_TARGET FROM dual) t
		LEFT JOIN 
		    (SELECT 
		        REVIEW_TARGET, 
		        COUNT(*) AS review_count, 
		        AVG(review_score) AS avg_score
		     FROM 
		        review
		     WHERE 
		        REVIEW_TARGET = #{memberId}
		     GROUP BY 
		        REVIEW_TARGET
		    ) r
		ON t.REVIEW_TARGET = r.REVIEW_TARGET
	</select>
	<select id="selectMemberProduct" resultType="ProductDto">
		SELECT * FROM product WHERE product_member = #{memberId}
	</select>
</mapper>