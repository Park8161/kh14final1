<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- (주의) 결제와 결제상세를 같은 곳에서 처리 -->
<mapper namespace="payment">
	
	<!-- 등록 -->
	<select id="paymentSequence" resultType="int">
		select payment_seq.nextval from dual
	</select>
	<select id="paymentDetailSequence" resultType="int">
		select payment_detail_seq.nextval from dual
	</select>
	
	<insert id="paymentInsert">
		insert into payment(
			payment_no, payment_tid, payment_name, 
			payment_total, payment_remain, payment_buyer, payment_seller, product_no, payment_status
		) values(
			#{paymentNo}, #{paymentTid}, #{paymentName}, 
			#{paymentTotal}, #{paymentRemain}, #{paymentBuyer}, 
			#{paymentSeller}, #{productNo}, #{paymentStatus}
		)
	</insert>
	<insert id="paymentDetailInsert">
		insert into payment_detail(
			payment_detail_no, payment_detail_name, payment_detail_price, 
			payment_detail_qty, payment_detail_item, payment_detail_origin,
			payment_detail_status
		) values(
			#{paymentDetailNo}, #{paymentDetailName}, #{paymentDetailPrice}, 
			#{paymentDetailQty}, #{paymentDetailItem}, #{paymentDetailOrigin}, 
			'승인'
		)
	</insert>
	
	<!-- 특정 회원의 결제 대표 정보를 조회하는 구문 -->
	<select id="list" resultType="PaymentDto">
		select * from payment where payment_buyer = #{memberId} order by payment_no desc
	</select>
	
	<select id="find" resultType="PaymentDto">
		select * from payment where payment_no = #{paymentNo}
	</select>
	
	<select id="findDetail" resultType="paymentDetailDto">
		select * from payment_detail where payment_detail_origin = #{paymentNo} order by payment_detail_no asc
	</select>
	
	<!--  
		mybatis에서 특정 목록에 맞는 데이터를 수동으로 조회
		- 계층형 조회에서 많이 사용
		- resultMap을 이용해서 내가 직접 정의한 형태를 알려줘야 한다
		- mybatis는 depth 1 까지만 자동 매핑이 가능
		- 보통 부분만 추출해서 조회할 때 쓴다 (ex. 페이징 등)
		
		type은 실제 자료형, id는 매퍼 내에서 부를 별칭
		필드가 객체라면 association을 사용 >> dto
		필드가 collection이라면 collection을 사용 >> list, set, map, ...
		result의 column은 DB의 컬럼명, property는 클래스 필드명
		필드의 자료형이 애매하면 언급해주는 것도 좋다(javaType) 어지간해서는 자동매핑가능
		- javaType : 저장소 자료형
		- ofType : 내부 데이터의 자료형
		- select : 데이터를 채우기 위해 실행해야할 구문
		- column : 구문을 실행하는데 필요한 값의 컬럼명
	-->
	<resultMap type="PaymentTotalVO" id="paymentTotalVO">
		<association property="paymentDto">
			<result column="payment_no" property="paymentNo"/>
			<result column="payment_name" property="paymentName"/>
			<result column="payment_total" property="paymentTotal"/>
			<result column="payment_tid" property="paymentTid"/>
			<result column="payment_remain" property="paymentRemain"/>
			<result column="payment_time" property="paymentTime" javaType="java.sql.Date"/>
			<result column="member_id" property="memberId"/>
		</association>
		<collection property="paymentDetailList" 
					javaType="java.util.List" ofType="PaymentDetailDto"
					select="findDetail" column="payment_no">
			<result column="payment_detail_no" property="paymentDetailNo"/>
			<result column="payment_detail_name" property="paymentDetailName"/>
			<result column="payment_detail_price" property="paymentDetailPrice"/>
			<result column="payment_detail_qty" property="paymentDetailQty"/>
			<result column="payment_detail_item" property="paymentDetailItem"/>
			<result column="payment_detail_origin" property="paymentDetailOrigin"/>
			<result column="payment_detail_status" property="paymentDetailStatus"/>
		</collection>
	</resultMap>
	<!-- 내가 만든 resultMap을 이용하여 조회하고 싶다면 select에 resultMap을 작성 -->
	<select id="findTotal" resultMap="paymentTotalVO">
		select * from payment where member_id = #{memberId} order by payment_no desc
	</select>
	
	<!-- 
		결제 전체/부분 취소 
		- 해당 결제 건 전체를 취소한다는건 대표정보 및 상세정보를 수정한다는 뜻
		- 결제 상세 항목 한 개를 취소하더라도 전체 정보의 잔여금액을 차감해야 함
	-->
	<update id="cancelAll">
		update payment set payment_remain = 0  where payment_no = #{paymentNo}
	</update>
	<update id="cancelAllItem">
		update payment set payment_status = '취소' where payment_no = #{paymentNo}
	</update>
	<update id="cancelItem">
		update payment_detail set payment_detail_status = '취소' where payment_detail_no = #{paymentDetailNo}
	</update>
	<update id="decreaseItemRemain">
		update payment set payment_remain = payment_remain - #{money} where payment_no = #{paymentNo}
	</update>
	
	<!-- 결제 상세 단일 조회 -->
	<select id="selectDetailOne" resultType="paymentDetailDto">
		select * from payment_detail where payment_detail_no = #{paymentDetailNo}
	</select>
	
	<update id="setSoldOut">
		update product set product_state = '판매완료' WHERE PRODUCT_NO = #{productNo}
	</update>
	
	<update id="cancelBuy">
		update product set product_state = '판매중' where product_no = #{productNo}
	</update>
	
	<select id="selectPaymentImage" resultType="PaymentImageVO">
		SELECT p.*, pi2.*
		FROM payment p
		JOIN (
		    SELECT pi2.*, 
		           ROW_NUMBER() OVER (PARTITION BY pi2.product ORDER BY pi2.attachment ASC) as rn
		    FROM PRODUCT_IMAGE pi2
		) pi2 ON p.product_no = pi2.product
		WHERE p.product_no = #{productNo}
		AND pi2.rn = 1
	</select>
	
	<select id="selectPaidPr" resultType="int">
	SELECT product_no FROM payment WHERE PAYMENT_BUYER = #{memberId}
	</select>
	
	<update id="confirmBuy">
		update payment SET PAYMENT_STATUS ='확정' WHERE payment_no = #{paymentNo}
	</update>
</mapper>